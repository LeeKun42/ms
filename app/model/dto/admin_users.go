// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dto

import (
	"ms/app/lib/constants"
	"ms/app/model/resp"
	"time"
)

const TableNameAdminUser = "admin_users"
const UserStatusDisabled = 0
const UserStatusEnable = 1
var userStatusMap = map[int]string{
	UserStatusDisabled: "禁用",
	UserStatusEnable: "正常",
}

// AdminUser mapped from table <admin_users>
type AdminUser struct {
	ID        int       `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`
	Mobile    string    `gorm:"column:mobile;not null;comment:手机号码" json:"mobile"`
	Email     string    `gorm:"column:email;not null;comment:邮箱" json:"email"`
	Passwd 	  string    `gorm:"column:passwd;not null;comment:登录密码" json:"passwd"`
	Name      string    `gorm:"column:name;not null;comment:姓名" json:"name"`
	Avatar    string    `gorm:"column:avatar;not null;comment:头像地址" json:"avatar"`
	Status    int       `gorm:"column:status;not null;comment:状态： 1：正常  0：禁用" json:"status"`
	CreatedAt time.Time `gorm:"column:created_at;not null;default:CURRENT_TIMESTAMP;comment:创建时间" json:"created_at"`
	UpdatedAt time.Time `gorm:"column:updated_at;not null;default:CURRENT_TIMESTAMP;comment:最后更新时间" json:"updated_at"`

	Roles  []Role `gorm:"many2many:admin_user_roles;" json:"roles"`
}

// TableName AdminUser's table name
func (*AdminUser) TableName() string {
	return TableNameAdminUser
}

func (adminUser *AdminUser) ToResponse() (adminUserInfoResponse resp.AdminUserResponse) {
	adminUserInfoResponse.ID = adminUser.ID
	adminUserInfoResponse.Mobile = adminUser.Mobile
	adminUserInfoResponse.Email = adminUser.Email
	adminUserInfoResponse.Name = adminUser.Name
	adminUserInfoResponse.Avatar = adminUser.Avatar
	adminUserInfoResponse.Status = adminUser.Status
	adminUserInfoResponse.StatusText = userStatusMap[adminUser.Status]
	adminUserInfoResponse.CreatedAt = adminUser.CreatedAt.Format(constants.DateTimeFormat)
	adminUserInfoResponse.UpdatedAt = adminUser.UpdatedAt.Format(constants.DateTimeFormat)
	permissionMap := make(map[string]bool)
	for _, role := range adminUser.Roles {
		for _, permission := range role.Permissions {
			if _, hasPermission := permissionMap[permission.Flag]; hasPermission{
				continue
			}
			adminUserInfoResponse.Permissions = append(adminUserInfoResponse.Permissions, permission.Flag)
			permissionMap[permission.Flag] = true
		}
		adminUserInfoResponse.Roles = append(adminUserInfoResponse.Roles, role.ToResponse())
	}
	return
}